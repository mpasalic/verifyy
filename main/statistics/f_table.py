# # # # # # # # # # # # # # #
# @author Alexander Novikov
#
# This is a file with f-test value queries. It has a hardcoded table
# and it can interpolate between two indices across both dimensions
# (the f-values given are sparse as num of degrees of freedom gets 
# close to 100s ranges)
#
#

# Get a map of df1 to index mapping
df_indexes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30, 35, 40, 45, 50, 60, 70, 80, 100, 200, 500, 1000, 1001]
exact_value_indexes={}

i = 0
for df1 in df_indexes:
    exact_value_indexes[df1]=i
    i += 1



# Prepare a large hashmap of f-test values @ 5% significance level
# This table is column-major, so we list degrees of freedoms 1 (df1) entries in rows
ftable = {}

# Prepare columns

ftable[3]=[10.13, 9.55, 9.28, 9.12, 9.01, 8.94, 8.89, 8.85, 8.81, 8.79, 8.76, 8.74, 8.73, 8.71, 8.70, 8.69, 8.68, 8.67, 8.67, 8.66, 8.65, 8.64, 8.63, 8.62, 8.62, 8.60, 8.59, 8.59, 8.58, 8.57, 8.57, 8.56, 8.55, 8.54, 8.53, 8.53, 8.54]
ftable[4 ]=[7.71, 6.94, 6.59, 6.39, 6.26, 6.16, 6.09, 6.04, 6.00, 5.96, 5.94, 5.91, 5.89, 5.87, 5.86, 5.84, 5.83, 5.82, 5.81, 5.80, 5.79, 5.77, 5.76, 5.75, 5.75, 5.73, 5.72, 5.71, 5.70, 5.69, 5.68, 5.67, 5.66, 5.65, 5.64, 5.63, 5.63]
ftable[5 ]=[6.61, 5.79, 5.41, 5.19, 5.05, 4.95, 4.88, 4.82, 4.77, 4.74, 4.70, 4.68, 4.66, 4.64, 4.62, 4.60, 4.59, 4.58, 4.57, 4.56, 4.54, 4.53, 4.52, 4.50, 4.50, 4.48, 4.46, 4.45, 4.44, 4.43, 4.42, 4.42, 4.41, 4.39, 4.37, 4.37, 4.36]
ftable[6 ]=[5.99, 5.14, 4.76, 4.53, 4.39, 4.28, 4.21, 4.15, 4.10, 4.06, 4.03, 4.00, 3.98, 3.96, 3.94, 3.92, 3.91, 3.90, 3.88, 3.87, 3.86, 3.84, 3.83, 3.82, 3.81, 3.79, 3.77, 3.76, 3.75, 3.74, 3.73, 3.72, 3.71, 3.69, 3.68, 3.67, 3.67]
ftable[7 ]=[5.59, 4.74, 4.35, 4.12, 3.97, 3.87, 3.79, 3.73, 3.68, 3.64, 3.60, 3.57, 3.55, 3.53, 3.51, 3.49, 3.48, 3.47, 3.46, 3.44, 3.43, 3.41, 3.40, 3.39, 3.38, 3.36, 3.34, 3.33, 3.32, 3.30, 3.29, 3.29, 3.27, 3.25, 3.24, 3.23, 3.23]
ftable[8 ]=[5.32, 4.46, 4.07, 3.84, 3.69, 3.58, 3.50, 3.44, 3.39, 3.35, 3.31, 3.28, 3.26, 3.24, 3.22, 3.20, 3.19, 3.17, 3.16, 3.15, 3.13, 3.12, 3.10, 3.09, 3.08, 3.06, 3.04, 3.03, 3.02, 3.01, 2.99, 2.99, 2.97, 2.95, 2.94, 2.93, 2.93]
ftable[9 ]=[5.12, 4.26, 3.86, 3.63, 3.48, 3.37, 3.29, 3.23, 3.18, 3.14, 3.10, 3.07, 3.05, 3.03, 3.01, 2.99, 2.97, 2.96, 2.95, 2.94, 2.92, 2.90, 2.89, 2.87, 2.86, 2.84, 2.83, 2.81, 2.80, 2.79, 2.78, 2.77, 2.76, 2.73, 2.72, 2.71, 2.71]
ftable[10]=[4.96, 4.10, 3.71, 3.48, 3.33, 3.22, 3.14, 3.07, 3.02, 2.98, 2.94, 2.91, 2.89, 2.86, 2.85, 2.83, 2.81, 2.80, 2.79, 2.77, 2.75, 2.74, 2.72, 2.71, 2.70, 2.68, 2.66, 2.65, 2.64, 2.62, 2.61, 2.60, 2.59, 2.56, 2.55, 2.54, 2.54]
ftable[11]=[4.84, 3.98, 3.59, 3.36, 3.20, 3.09, 3.01, 2.95, 2.90, 2.85, 2.82, 2.79, 2.76, 2.74, 2.72, 2.70, 2.69, 2.67, 2.66, 2.65, 2.63, 2.61, 2.59, 2.58, 2.57, 2.55, 2.53, 2.52, 2.51, 2.49, 2.48, 2.47, 2.46, 2.43, 2.42, 2.41, 2.41]
ftable[12]=[4.75, 3.89, 3.49, 3.26, 3.11, 3.00, 2.91, 2.85, 2.80, 2.75, 2.72, 2.69, 2.66, 2.64, 2.62, 2.60, 2.58, 2.57, 2.56, 2.54, 2.52, 2.51, 2.49, 2.48, 2.47, 2.44, 2.43, 2.41, 2.40, 2.38, 2.37, 2.36, 2.35, 2.32, 2.31, 2.30, 2.30]
ftable[13]=[4.67, 3.81, 3.41, 3.18, 3.03, 2.92, 2.83, 2.77, 2.71, 2.67, 2.63, 2.60, 2.58, 2.55, 2.53, 2.51, 2.50, 2.48, 2.47, 2.46, 2.44, 2.42, 2.41, 2.39, 2.38, 2.36, 2.34, 2.33, 2.31, 2.30, 2.28, 2.27, 2.26, 2.23, 2.22, 2.21, 2.21]
ftable[14]=[4.60, 3.74, 3.34, 3.11, 2.96, 2.85, 2.76, 2.70, 2.65, 2.60, 2.57, 2.53, 2.51, 2.48, 2.46, 2.44, 2.43, 2.41, 2.40, 2.39, 2.37, 2.35, 2.33, 2.32, 2.31, 2.28, 2.27, 2.25, 2.24, 2.22, 2.21, 2.20, 2.19, 2.16, 2.14, 2.14, 2.13]
ftable[15]=[4.54, 3.68, 3.29, 3.06, 2.90, 2.79, 2.71, 2.64, 2.59, 2.54, 2.51, 2.48, 2.45, 2.42, 2.40, 2.38, 2.37, 2.35, 2.34, 2.33, 2.31, 2.29, 2.27, 2.26, 2.25, 2.22, 2.20, 2.19, 2.18, 2.16, 2.15, 2.14, 2.12, 2.10, 2.08, 2.07, 2.07]
ftable[16]=[4.49, 3.63, 3.24, 3.01, 2.85, 2.74, 2.66, 2.59, 2.54, 2.49, 2.46, 2.42, 2.40, 2.37, 2.35, 2.33, 2.32, 2.30, 2.29, 2.28, 2.25, 2.24, 2.22, 2.21, 2.19, 2.17, 2.15, 2.14, 2.12, 2.11, 2.09, 2.08, 2.07, 2.04, 2.02, 2.02, 2.01]
ftable[17]=[4.45, 3.59, 3.20, 2.96, 2.81, 2.70, 2.61, 2.55, 2.49, 2.45, 2.41, 2.38, 2.35, 2.33, 2.31, 2.29, 2.27, 2.26, 2.24, 2.23, 2.21, 2.19, 2.17, 2.16, 2.15, 2.12, 2.10, 2.09, 2.08, 2.06, 2.05, 2.03, 2.02, 1.99, 1.97, 1.97, 1.96]
ftable[18]=[4.41, 3.55, 3.16, 2.93, 2.77, 2.66, 2.58, 2.51, 2.46, 2.41, 2.37, 2.34, 2.31, 2.29, 2.27, 2.25, 2.23, 2.22, 2.20, 2.19, 2.17, 2.15, 2.13, 2.12, 2.11, 2.08, 2.06, 2.05, 2.04, 2.02, 2.00, 1.99, 1.98, 1.95, 1.93, 1.92, 1.92]
ftable[19]=[4.38, 3.52, 3.13, 2.90, 2.74, 2.63, 2.54, 2.48, 2.42, 2.38, 2.34, 2.31, 2.28, 2.26, 2.23, 2.21, 2.20, 2.18, 2.17, 2.16, 2.13, 2.11, 2.10, 2.08, 2.07, 2.05, 2.03, 2.01, 2.00, 1.98, 1.97, 1.96, 1.94, 1.91, 1.89, 1.88, 1.88]
ftable[20]=[4.35, 3.49, 3.10, 2.87, 2.71, 2.60, 2.51, 2.45, 2.39, 2.35, 2.31, 2.28, 2.25, 2.23, 2.20, 2.18, 2.17, 2.15, 2.14, 2.12, 2.10, 2.08, 2.07, 2.05, 2.04, 2.01, 1.99, 1.98, 1.97, 1.95, 1.93, 1.92, 1.91, 1.88, 1.86, 1.85, 1.84]
ftable[22]=[4.30, 3.44, 3.05, 2.82, 2.66, 2.55, 2.46, 2.40, 2.34, 2.30, 2.26, 2.23, 2.20, 2.17, 2.15, 2.13, 2.11, 2.10, 2.08, 2.07, 2.05, 2.03, 2.01, 2.00, 1.98, 1.96, 1.94, 1.92, 1.91, 1.89, 1.88, 1.86, 1.85, 1.82, 1.80, 1.79, 1.78]
ftable[24]=[4.26, 3.40, 3.01, 2.78, 2.62, 2.51, 2.42, 2.36, 2.30, 2.25, 2.22, 2.18, 2.15, 2.13, 2.11, 2.09, 2.07, 2.05, 2.04, 2.03, 2.00, 1.98, 1.97, 1.95, 1.94, 1.91, 1.89, 1.88, 1.86, 1.84, 1.83, 1.82, 1.80, 1.77, 1.75, 1.74, 1.73]
ftable[26]=[4.23, 3.37, 2.98, 2.74, 2.59, 2.47, 2.39, 2.32, 2.27, 2.22, 2.18, 2.15, 2.12, 2.09, 2.07, 2.05, 2.03, 2.02, 2.00, 1.99, 1.97, 1.95, 1.93, 1.91, 1.90, 1.87, 1.85, 1.84, 1.82, 1.80, 1.79, 1.78, 1.76, 1.73, 1.71, 1.70, 1.69]
ftable[28]=[4.20, 3.34, 2.95, 2.71, 2.56, 2.45, 2.36, 2.29, 2.24, 2.19, 2.15, 2.12, 2.09, 2.06, 2.04, 2.02, 2.00, 1.99, 1.97, 1.96, 1.93, 1.91, 1.90, 1.88, 1.87, 1.84, 1.82, 1.80, 1.79, 1.77, 1.75, 1.74, 1.73, 1.69, 1.67, 1.66, 1.66]
ftable[30]=[4.17, 3.32, 2.92, 2.69, 2.53, 2.42, 2.33, 2.27, 2.21, 2.16, 2.13, 2.09, 2.06, 2.04, 2.01, 1.99, 1.98, 1.96, 1.95, 1.93, 1.91, 1.89, 1.87, 1.85, 1.84, 1.81, 1.79, 1.77, 1.76, 1.74, 1.72, 1.71, 1.70, 1.66, 1.64, 1.63, 1.62]
ftable[35]=[4.12, 3.27, 2.87, 2.64, 2.49, 2.37, 2.29, 2.22, 2.16, 2.11, 2.08, 2.04, 2.01, 1.99, 1.96, 1.94, 1.92, 1.91, 1.89, 1.88, 1.85, 1.83, 1.82, 1.80, 1.79, 1.76, 1.74, 1.72, 1.70, 1.68, 1.66, 1.65, 1.63, 1.60, 1.57, 1.57, 1.56]
ftable[40]=[4.08, 3.23, 2.84, 2.61, 2.45, 2.34, 2.25, 2.18, 2.12, 2.08, 2.04, 2.00, 1.97, 1.95, 1.92, 1.90, 1.89, 1.87, 1.85, 1.84, 1.81, 1.79, 1.77, 1.76, 1.74, 1.72, 1.69, 1.67, 1.66, 1.64, 1.62, 1.61, 1.59, 1.55, 1.53, 1.52, 1.51]
ftable[45]=[4.06, 3.20, 2.81, 2.58, 2.42, 2.31, 2.22, 2.15, 2.10, 2.05, 2.01, 1.97, 1.94, 1.92, 1.89, 1.87, 1.86, 1.84, 1.82, 1.81, 1.78, 1.76, 1.74, 1.73, 1.71, 1.68, 1.66, 1.64, 1.63, 1.60, 1.59, 1.57, 1.55, 1.51, 1.49, 1.48, 1.47]
ftable[50]=[4.03, 3.18, 2.79, 2.56, 2.40, 2.29, 2.20, 2.13, 2.07, 2.03, 1.99, 1.95, 1.92, 1.89, 1.87, 1.85, 1.83, 1.81, 1.80, 1.78, 1.76, 1.74, 1.72, 1.70, 1.69, 1.66, 1.63, 1.61, 1.60, 1.58, 1.56, 1.54, 1.52, 1.48, 1.46, 1.45, 1.44]
ftable[60]=[4.00, 3.15, 2.76, 2.53, 2.37, 2.25, 2.17, 2.10, 2.04, 1.99, 1.95, 1.92, 1.89, 1.86, 1.84, 1.82, 1.80, 1.78, 1.76, 1.75, 1.72, 1.70, 1.68, 1.66, 1.65, 1.62, 1.59, 1.57, 1.56, 1.53, 1.52, 1.50, 1.48, 1.44, 1.41, 1.40, 1.39]
ftable[70]=[3.98, 3.13, 2.74, 2.50, 2.35, 2.23, 2.14, 2.07, 2.02, 1.97, 1.93, 1.89, 1.86, 1.84, 1.81, 1.79, 1.77, 1.75, 1.74, 1.72, 1.70, 1.67, 1.65, 1.64, 1.62, 1.59, 1.57, 1.55, 1.53, 1.50, 1.49, 1.47, 1.45, 1.40, 1.37, 1.36, 1.35]
ftable[80]=[3.96, 3.11, 2.72, 2.49, 2.33, 2.21, 2.13, 2.06, 2.00, 1.95, 1.91, 1.88, 1.84, 1.82, 1.79, 1.77, 1.75, 1.73, 1.72, 1.70, 1.68, 1.65, 1.63, 1.62, 1.60, 1.57, 1.54, 1.52, 1.51, 1.48, 1.46, 1.45, 1.43, 1.38, 1.35, 1.34, 1.33]
ftable[100]=[3.94, 3.09, 2.70, 2.46, 2.31, 2.19, 2.10, 2.03, 1.97, 1.93, 1.89, 1.85, 1.82, 1.79, 1.77, 1.75, 1.73, 1.71, 1.69, 1.68, 1.65, 1.63, 1.61, 1.59, 1.57, 1.54, 1.52, 1.49, 1.48, 1.45, 1.43, 1.41, 1.39, 1.34, 1.31, 1.30, 1.28]
ftable[200]=[3.89, 3.04, 2.65, 2.42, 2.26, 2.14, 2.06, 1.98, 1.93, 1.88, 1.84, 1.80, 1.77, 1.74, 1.72, 1.69, 1.67, 1.66, 1.64, 1.62, 1.60, 1.57, 1.55, 1.53, 1.52, 1.48, 1.46, 1.43, 1.41, 1.39, 1.36, 1.35, 1.32, 1.26, 1.22, 1.21, 1.19]
ftable[500]=[3.86, 3.01, 2.62, 2.39, 2.23, 2.12, 2.03, 1.96, 1.90, 1.85, 1.81, 1.77, 1.74, 1.71, 1.69, 1.66, 1.64, 1.62, 1.61, 1.59, 1.56, 1.54, 1.52, 1.50, 1.48, 1.45, 1.42, 1.40, 1.38, 1.35, 1.32, 1.30, 1.28, 1.21, 1.16, 1.14, 1.12]
ftable[1000]=[3.85, 3.00, 2.61, 2.38, 2.22, 2.11, 2.02, 1.95, 1.89, 1.84, 1.80, 1.76, 1.73, 1.70, 1.68, 1.65, 1.63, 1.61, 1.60, 1.58, 1.55, 1.53, 1.51, 1.49, 1.47, 1.43, 1.41, 1.38, 1.36, 1.33, 1.31, 1.29, 1.26, 1.19, 1.13, 1.11, 1.08]
ftable[1001]=[1.04, 3.00, 2.61, 2.37, 2.21, 2.10, 2.01, 1.94, 1.88, 1.83, 1.79, 1.75, 1.72, 1.69, 1.67, 1.64, 1.62, 1.61, 1.59, 1.57, 1.54, 1.52, 1.50, 1.48, 1.46, 1.42, 1.40, 1.37, 1.35, 1.32, 1.30, 1.28, 1.25, 1.17, 1.11, 1.08, 1.03]

def f_table_value(df1, df2):
    df1_indexes = []
    df2_indexes = []
    df1_weights = []
    df2_weights = []
    
    if df1 < 1:
        return -1
    if df2 < 3:
        return -1
    
    if df1 > 1000:
        # subtract 1 because indexing in arrays is 0-based
        df1_indexes.append(exact_value_indexes[1001])
        df1_weights.append(1.0)
    else:
        if df1 in exact_value_indexes:
            df1_indexes.append(df1)
            df1_weights.append(1.0)
        else:
            # We need to interpolate
            df_prev = df_indexes[0]
            for df in df_indexes:
                if df > df1:
                    # we've found the interval
                    df1_indexes.append(df_prev)
                    df1_weights.append(float(df1 - df_prev)/(df - df_prev))
                    df1_indexes.append(df)
                    df1_weights.append(float(df - df1)/(df - df_prev))
                    break
                df_prev = df
            
    if df2 > 1000:
        df2_indexes.append(1001)
        df2_weights.append(1.0)
    else:
        if df2 in exact_value_indexes:
            df2_indexes.append(df2)
            df2_weights.append(1.0)
        else:
            # We need to interpolate
            df_prev = df_indexes[0]
            for df in df_indexes:
                if df > df2:
                    # we've found the interval
                    df2_indexes.append(df_prev)
                    df2_weights.append(float(df2 - df_prev)/(df - df_prev))
                    df2_indexes.append(df)
                    df2_weights.append(float(df - df2)/(df - df_prev))
                    break
                df_prev = df
    
    # We have now components for linear interpolation of the f-value
    val = 0
    for df2ii in range(0,len(df2_indexes)):
        for df1ii in range(0, len(df1_indexes)):
            val += df2_weights[df2ii] * df1_weights[df1ii] * ftable[df2_indexes[df2ii]][exact_value_indexes[df1_indexes[df1ii]]]
    
    # Ok, We finally have our f-value!
    return val